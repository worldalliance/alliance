// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { AppHealthCheckData, AuthLoginData, AuthLoginResponse, AuthAdminLoginData, AuthAdminLoginResponse, AuthRegisterData, AuthRegisterResponse, AuthRefreshTokensData, AuthRefreshTokensResponse, AuthMeData, AuthMeResponse, AuthLogoutData, AuthForgotPasswordData, AuthResetPasswordData, UserFindMeData, UserFindMeResponse, UserOnboardingData, UserOnboardingResponse, UserUpdateData, UserMyLocationData, UserMyLocationResponse, UserRemoveFriendData, UserRequestFriendData, UserAcceptFriendRequestData, UserDeclineFriendRequestData, UserListReceivedRequestsData, UserListReceivedRequestsResponse, UserListSentRequestsData, UserListSentRequestsResponse, UserMyFriendRelationshipData, UserMyFriendRelationshipResponse, UserPrefillData, UserPrefillResponse, UserListFriendsData, UserListFriendsResponse, UserCountReferredData, UserCountReferredResponse, UserFindOneData, UserFindOneResponse, ActionsJoinData, ActionsCompleteData, ActionsMyStatusData, ActionsMyStatusResponse, ActionsFindAllWithStatusData, ActionsFindAllWithStatusResponse, ActionsFindAllPublicData, ActionsFindAllPublicResponse, ActionsUserLocationsData, ActionsUserLocationsResponse, ActionsGetActionActivitiesData, ActionsGetActionActivitiesResponse, ActionsFindAllWithDraftsData, ActionsFindAllWithDraftsResponse, ActionsSseActionCountData, ActionsLiveListData, ActionsOpengraphData, ActionsOpengraphResponse, ActionsRemoveData, ActionsFindOneData, ActionsFindOneResponse, ActionsUpdateData, ActionsCreateData, ActionsCreateResponse, ActionsFindCompletedForUserData, ActionsFindCompletedForUserResponse, ActionsAddEventData, ActionsAddEventResponse, CommuniquesFindAllData, CommuniquesFindAllResponse, CommuniquesCreateData, CommuniquesCreateResponse, CommuniquesRemoveData, CommuniquesRemoveResponse, CommuniquesFindOneData, CommuniquesFindOneResponse, CommuniquesUpdateData, CommuniquesUpdateResponse, CommuniquesGetReadData, CommuniquesGetReadResponse, CommuniquesReadData, ImagesUploadImageData, ImagesUploadImageResponse, ImagesGetImageData, ImagesGetImageResponse, ImagesDeleteImageData, ImagesDeleteImageResponse, ForumFindAllPostsData, ForumFindAllPostsResponse, ForumCreatePostData, ForumCreatePostResponse, ForumFindPostsByActionData, ForumFindPostsByActionResponse, ForumRemovePostData, ForumFindOnePostData, ForumFindOnePostResponse, ForumUpdatePostData, ForumUpdatePostResponse, ForumFindPostsByUserData, ForumFindPostsByUserResponse, ForumCreateReplyData, ForumCreateReplyResponse, ForumRemoveReplyData, ForumUpdateReplyData, ForumUpdateReplyResponse, NotifsFindAllData, NotifsFindAllResponse, NotifsSetReadData, GeoSearchCityData, GeoSearchCityResponse, GeoLoadCountryDataData, GeoLoadCityDataData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<AppHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const authLogin = <ThrowOnError extends boolean = false>(options: Options<AuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authAdminLogin = <ThrowOnError extends boolean = false>(options: Options<AuthAdminLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthAdminLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/admin/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authRegister = <ThrowOnError extends boolean = false>(options: Options<AuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthRegisterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authRefreshTokens = <ThrowOnError extends boolean = false>(options?: Options<AuthRefreshTokensData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthRefreshTokensResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

export const authMe = <ThrowOnError extends boolean = false>(options?: Options<AuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

export const authLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

export const authForgotPassword = <ThrowOnError extends boolean = false>(options: Options<AuthForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authResetPassword = <ThrowOnError extends boolean = false>(options: Options<AuthResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userFindMe = <ThrowOnError extends boolean = false>(options?: Options<UserFindMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserFindMeResponse, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

export const userOnboarding = <ThrowOnError extends boolean = false>(options: Options<UserOnboardingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserOnboardingResponse, unknown, ThrowOnError>({
        url: '/user/onboarding',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/user/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userMyLocation = <ThrowOnError extends boolean = false>(options?: Options<UserMyLocationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserMyLocationResponse, unknown, ThrowOnError>({
        url: '/user/mylocation',
        ...options
    });
};

/**
 * Cancel a request or remove an existing friend
 */
export const userRemoveFriend = <ThrowOnError extends boolean = false>(options: Options<UserRemoveFriendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/user/friends/{targetUserId}',
        ...options
    });
};

/**
 * Send a friend request
 */
export const userRequestFriend = <ThrowOnError extends boolean = false>(options: Options<UserRequestFriendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/user/friends/{targetUserId}',
        ...options
    });
};

/**
 * Accept a pending friend request
 */
export const userAcceptFriendRequest = <ThrowOnError extends boolean = false>(options: Options<UserAcceptFriendRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        url: '/user/friends/{requesterId}/accept',
        ...options
    });
};

/**
 * Decline a pending friend request
 */
export const userDeclineFriendRequest = <ThrowOnError extends boolean = false>(options: Options<UserDeclineFriendRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        url: '/user/friends/{requesterId}/decline',
        ...options
    });
};

/**
 * Requests other users sent to me (pending)
 */
export const userListReceivedRequests = <ThrowOnError extends boolean = false>(options?: Options<UserListReceivedRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListReceivedRequestsResponse, unknown, ThrowOnError>({
        url: '/user/friends/requests/received',
        ...options
    });
};

/**
 * Requests I sent that are still pending
 */
export const userListSentRequests = <ThrowOnError extends boolean = false>(options?: Options<UserListSentRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListSentRequestsResponse, unknown, ThrowOnError>({
        url: '/user/friends/requests/sent',
        ...options
    });
};

export const userMyFriendRelationship = <ThrowOnError extends boolean = false>(options: Options<UserMyFriendRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserMyFriendRelationshipResponse, unknown, ThrowOnError>({
        url: '/user/myfriendrelationship/{id}',
        ...options
    });
};

export const userPrefill = <ThrowOnError extends boolean = false>(options: Options<UserPrefillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserPrefillResponse, unknown, ThrowOnError>({
        url: '/user/prefill/{id}',
        ...options
    });
};

export const userListFriends = <ThrowOnError extends boolean = false>(options: Options<UserListFriendsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListFriendsResponse, unknown, ThrowOnError>({
        url: '/user/listfriends/{id}',
        ...options
    });
};

/**
 * Count the number of friends a user has referred
 */
export const userCountReferred = <ThrowOnError extends boolean = false>(options: Options<UserCountReferredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserCountReferredResponse, unknown, ThrowOnError>({
        url: '/user/countreferred/{id}',
        ...options
    });
};

export const userFindOne = <ThrowOnError extends boolean = false>(options: Options<UserFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindOneResponse, unknown, ThrowOnError>({
        url: '/user/{id}',
        ...options
    });
};

export const actionsJoin = <ThrowOnError extends boolean = false>(options: Options<ActionsJoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/actions/join/{id}',
        ...options
    });
};

export const actionsComplete = <ThrowOnError extends boolean = false>(options: Options<ActionsCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/actions/complete/{id}',
        ...options
    });
};

/**
 * Get the authenticated user's relation to a single action
 */
export const actionsMyStatus = <ThrowOnError extends boolean = false>(options: Options<ActionsMyStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsMyStatusResponse, unknown, ThrowOnError>({
        url: '/actions/myStatus/{id}',
        ...options
    });
};

export const actionsFindAllWithStatus = <ThrowOnError extends boolean = false>(options?: Options<ActionsFindAllWithStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActionsFindAllWithStatusResponse, unknown, ThrowOnError>({
        url: '/actions/withStatus',
        ...options
    });
};

export const actionsFindAllPublic = <ThrowOnError extends boolean = false>(options?: Options<ActionsFindAllPublicData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActionsFindAllPublicResponse, unknown, ThrowOnError>({
        url: '/actions',
        ...options
    });
};

export const actionsUserLocations = <ThrowOnError extends boolean = false>(options: Options<ActionsUserLocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsUserLocationsResponse, unknown, ThrowOnError>({
        url: '/actions/userlocations/{id}',
        ...options
    });
};

/**
 * Get recent activities for an action
 */
export const actionsGetActionActivities = <ThrowOnError extends boolean = false>(options: Options<ActionsGetActionActivitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsGetActionActivitiesResponse, unknown, ThrowOnError>({
        url: '/actions/{id}/activities',
        ...options
    });
};

export const actionsFindAllWithDrafts = <ThrowOnError extends boolean = false>(options?: Options<ActionsFindAllWithDraftsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActionsFindAllWithDraftsResponse, unknown, ThrowOnError>({
        url: '/actions/all',
        ...options
    });
};

/**
 * SSE endpoint for join counts on a single action
 */
export const actionsSseActionCount = <ThrowOnError extends boolean = false>(options: Options<ActionsSseActionCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/actions/live/{id}',
        ...options
    });
};

/**
 * SSE endpoint for join counts on multiple actions
 */
export const actionsLiveList = <ThrowOnError extends boolean = false>(options: Options<ActionsLiveListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/actions/live-list',
        ...options
    });
};

export const actionsOpengraph = <ThrowOnError extends boolean = false>(options?: Options<ActionsOpengraphData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActionsOpengraphResponse, unknown, ThrowOnError>({
        url: '/actions/opengraph',
        ...options
    });
};

export const actionsRemove = <ThrowOnError extends boolean = false>(options: Options<ActionsRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/actions/{id}',
        ...options
    });
};

export const actionsFindOne = <ThrowOnError extends boolean = false>(options: Options<ActionsFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsFindOneResponse, unknown, ThrowOnError>({
        url: '/actions/{id}',
        ...options
    });
};

export const actionsUpdate = <ThrowOnError extends boolean = false>(options: Options<ActionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        url: '/actions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const actionsCreate = <ThrowOnError extends boolean = false>(options: Options<ActionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActionsCreateResponse, unknown, ThrowOnError>({
        url: '/actions/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all completed actions for a user
 */
export const actionsFindCompletedForUser = <ThrowOnError extends boolean = false>(options: Options<ActionsFindCompletedForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsFindCompletedForUserResponse, unknown, ThrowOnError>({
        url: '/actions/completed/{id}',
        ...options
    });
};

export const actionsAddEvent = <ThrowOnError extends boolean = false>(options: Options<ActionsAddEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActionsAddEventResponse, unknown, ThrowOnError>({
        url: '/actions/{id}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const communiquesFindAll = <ThrowOnError extends boolean = false>(options?: Options<CommuniquesFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CommuniquesFindAllResponse, unknown, ThrowOnError>({
        url: '/communiques',
        ...options
    });
};

export const communiquesCreate = <ThrowOnError extends boolean = false>(options: Options<CommuniquesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CommuniquesCreateResponse, unknown, ThrowOnError>({
        url: '/communiques',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const communiquesRemove = <ThrowOnError extends boolean = false>(options: Options<CommuniquesRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CommuniquesRemoveResponse, unknown, ThrowOnError>({
        url: '/communiques/{id}',
        ...options
    });
};

export const communiquesFindOne = <ThrowOnError extends boolean = false>(options: Options<CommuniquesFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommuniquesFindOneResponse, unknown, ThrowOnError>({
        url: '/communiques/{id}',
        ...options
    });
};

export const communiquesUpdate = <ThrowOnError extends boolean = false>(options: Options<CommuniquesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CommuniquesUpdateResponse, unknown, ThrowOnError>({
        url: '/communiques/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const communiquesGetRead = <ThrowOnError extends boolean = false>(options: Options<CommuniquesGetReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommuniquesGetReadResponse, unknown, ThrowOnError>({
        url: '/communiques/{id}/read',
        ...options
    });
};

export const communiquesRead = <ThrowOnError extends boolean = false>(options: Options<CommuniquesReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/communiques/{id}/read',
        ...options
    });
};

export const imagesUploadImage = <ThrowOnError extends boolean = false>(options: Options<ImagesUploadImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImagesUploadImageResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/images/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const imagesGetImage = <ThrowOnError extends boolean = false>(options: Options<ImagesGetImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ImagesGetImageResponse, unknown, ThrowOnError>({
        url: '/images/{filename}',
        ...options
    });
};

export const imagesDeleteImage = <ThrowOnError extends boolean = false>(options: Options<ImagesDeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ImagesDeleteImageResponse, unknown, ThrowOnError>({
        url: '/images/{id}',
        ...options
    });
};

/**
 * Get all forum posts
 */
export const forumFindAllPosts = <ThrowOnError extends boolean = false>(options?: Options<ForumFindAllPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ForumFindAllPostsResponse, unknown, ThrowOnError>({
        url: '/forum/posts',
        ...options
    });
};

/**
 * Create a new forum post
 */
export const forumCreatePost = <ThrowOnError extends boolean = false>(options: Options<ForumCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForumCreatePostResponse, unknown, ThrowOnError>({
        url: '/forum/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get posts for a specific action
 */
export const forumFindPostsByAction = <ThrowOnError extends boolean = false>(options: Options<ForumFindPostsByActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ForumFindPostsByActionResponse, unknown, ThrowOnError>({
        url: '/forum/posts/action/{actionId}',
        ...options
    });
};

/**
 * Delete a post
 */
export const forumRemovePost = <ThrowOnError extends boolean = false>(options: Options<ForumRemovePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/forum/posts/{id}',
        ...options
    });
};

/**
 * Get a specific post with its replies
 */
export const forumFindOnePost = <ThrowOnError extends boolean = false>(options: Options<ForumFindOnePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ForumFindOnePostResponse, unknown, ThrowOnError>({
        url: '/forum/posts/{id}',
        ...options
    });
};

/**
 * Update a post
 */
export const forumUpdatePost = <ThrowOnError extends boolean = false>(options: Options<ForumUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ForumUpdatePostResponse, unknown, ThrowOnError>({
        url: '/forum/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all posts by a specific user
 */
export const forumFindPostsByUser = <ThrowOnError extends boolean = false>(options: Options<ForumFindPostsByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ForumFindPostsByUserResponse, unknown, ThrowOnError>({
        url: '/forum/posts/user/{id}',
        ...options
    });
};

/**
 * Create a new reply to a post
 */
export const forumCreateReply = <ThrowOnError extends boolean = false>(options: Options<ForumCreateReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForumCreateReplyResponse, unknown, ThrowOnError>({
        url: '/forum/replies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a reply
 */
export const forumRemoveReply = <ThrowOnError extends boolean = false>(options: Options<ForumRemoveReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/forum/replies/{id}',
        ...options
    });
};

/**
 * Update a reply
 */
export const forumUpdateReply = <ThrowOnError extends boolean = false>(options: Options<ForumUpdateReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ForumUpdateReplyResponse, unknown, ThrowOnError>({
        url: '/forum/replies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notifsFindAll = <ThrowOnError extends boolean = false>(options?: Options<NotifsFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotifsFindAllResponse, unknown, ThrowOnError>({
        url: '/notifs',
        ...options
    });
};

export const notifsSetRead = <ThrowOnError extends boolean = false>(options: Options<NotifsSetReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/notifs/read/{id}',
        ...options
    });
};

export const geoSearchCity = <ThrowOnError extends boolean = false>(options: Options<GeoSearchCityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GeoSearchCityResponse, unknown, ThrowOnError>({
        url: '/geo/search-city',
        ...options
    });
};

export const geoLoadCountryData = <ThrowOnError extends boolean = false>(options?: Options<GeoLoadCountryDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/geo/load-country-data',
        ...options
    });
};

export const geoLoadCityData = <ThrowOnError extends boolean = false>(options?: Options<GeoLoadCityDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/geo/ip',
        ...options
    });
};